name: Continuous Integration

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    strategy:
      matrix:
        channel: [stable, beta, nightly]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install ${{ matrix.channel }} toolchain
        run: rustup install ${{ matrix.channel }}
      - name: Set ${{ matrix.channel }} toolchain as default
        run: rustup default ${{ matrix.channel }}
      - name: Install `clippy`, `rustfmt`
        run: rustup component add clippy rustfmt
      - name: Populate Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
      - name: Run `clippy`
        run: cargo clippy
      - name: Check formatting
        run: cargo fmt --check

  test:
    needs: lint
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        channel: [stable, beta, nightly]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install ${{ matrix.channel }} toolchain
        run: rustup install ${{ matrix.channel }}
      - name: Set ${{ matrix.channel }} toolchain as default
        run: rustup default ${{ matrix.channel }}
      - name: Populate Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
      - name: Install `cargo-binstall`
        uses: cargo-bins/cargo-binstall@v1.10.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install `cargo-nextest`, `rage`, `just`
        run: cargo binstall cargo-nextest rage just --secure --no-confirm --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        run: just test --profile ci
        env:
          AOC_INPUTS_SECRET: ${{ secrets.AOC_INPUTS_SECRET }}

  test-bench:
    name: Test Benchmarks
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install stable toolchain
        run: rustup install stable
      - name: Set stable toolchain as default
        run: rustup default stable
      - name: Populate Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
      - name: Install `cargo-binstall`
        uses: cargo-bins/cargo-binstall@v1.10.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install `cargo-nextest`, `rage`, `just`
        run: cargo binstall cargo-nextest rage just --secure --no-confirm --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        run: just test --profile ci --bench bench
        env:
          AOC_INPUTS_SECRET: ${{ secrets.AOC_INPUTS_SECRET }}

  bench:
    name: Run Benchmarks
    needs: test-bench
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        year: [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install stable toolchain
        run: rustup install stable
      - name: Set stable toolchain as default
        run: rustup default stable
      - name: Populate Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
      - name: Install `cargo-binstall`
        uses: cargo-bins/cargo-binstall@v1.10.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install `rage`, `just`
        run: cargo binstall rage just --secure --no-confirm --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install `bencher`
        uses: bencherdev/bencher@v0.4.23
      - name: Run benchmarks
        run: just bencher ${{ matrix.os }} ${{ matrix.year }}
        env:
          AOC_INPUTS_SECRET: ${{ secrets.AOC_INPUTS_SECRET }}
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
